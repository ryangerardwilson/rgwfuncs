#!/bin/bash

# Step 1: Create an __init__.py file dynamically
create_init_file() {
    local init_file="./src/rgwfuncs/__init__.py"
    echo "# This file is automatically generated" > "$init_file"
    echo "# Dynamically importing functions from modules" >> "$init_file"
    echo "" >> "$init_file"

    # Set the PYTHONPATH to include the src directory
    export PYTHONPATH=./src

    for module in ./src/rgwfuncs/*.py; do
        module_name=$(basename "$module" .py)
        if [ "$module_name" != "__init__" ]; then
            function_names=$(python3 -c "
import inspect
import rgwfuncs.${module_name} as mod

functions = [name for name, obj in inspect.getmembers(mod, inspect.isfunction) if obj.__module__ == 'rgwfuncs.${module_name}']
print(', '.join(functions))
" 2>/dev/null)
            if [ -n "$function_names" ]; then
                echo "from .${module_name} import ${function_names}" >> "$init_file"
            fi
        fi
    done

    echo "Generated __init__.py with content:"
    cat "$init_file"
}

# Step 2: Increment the version number in pyproject.toml and setup.cfg
increment_version() {
    local version_file="pyproject.toml"
    local setup_file="setup.cfg"

    # Extract the current version from pyproject.toml
    local version_line=$(grep -E 'version = "[0-9]+\.[0-9]+\.[0-9]+"' "$version_file")
    local current_version=$(echo "$version_line" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

    # Increment the patch version
    IFS='.' read -r -a version_parts <<< "$current_version"
    version_parts[2]=$((version_parts[2] + 1))
    local new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"

    # Update the version in pyproject.toml
    sed -i "s/version = \"$current_version\"/version = \"$new_version\"/" "$version_file"

    # Update the version in setup.cfg
    sed -i "s/version = $current_version/version = $new_version/" "$setup_file"

    echo "$new_version"
}

# Step 3: Clean the dist directory and rebuild the package
rebuild_package() {
    python3 -m pip install --upgrade build twine
    rm -rf dist/*
    python3 -m build
}

# Step 4: Upload the new version
upload_package() {
    python3 -m twine upload dist/*
}

# Step 5: Verify by installing the specific version
verify_package() {
    local new_version=$1
    echo "Execute this command after a minute to verify the new version $new_version: pip3 install --upgrade rgwfuncs"
}

# Execute the steps
echo "Creating __init__.py..."
create_init_file

echo "Incrementing version..."
new_version=$(increment_version)

echo "Rebuilding package..."
rebuild_package

echo "Uploading package..."
upload_package

echo "Verifying package..."
verify_package "$new_version"

